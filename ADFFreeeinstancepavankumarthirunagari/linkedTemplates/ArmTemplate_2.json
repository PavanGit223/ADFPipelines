{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADFFreeeinstancepavankumarthirunagari"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/HandlingErrorRowsInDataFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     rowUrlColumn: 'FileName') ~> source1",
						"source1 split(greaterOrEqual(toInteger(EmpId), 400),",
						"     disjoint: false) ~> split1@(EMPIDGreaterthan400, Lessthan400)",
						"split1@EMPIDGreaterthan400 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['Greaterthan400data'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@Lessthan400 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['lessthan400Datafile'],",
						"     mapColumn(",
						"          EmpId,",
						"          FitrstName,",
						"          LastName,",
						"          Address,",
						"          Gender,",
						"          Salary",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JSON_inputdata')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Json1",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          EmpId,",
						"          FitrstName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(start = '{',",
						"          EmpId = '\"name\"'+':'+'\"'+EmpId+'\"',",
						"          FitrstName = '\"Job\"'+':'+'\"'+FitrstName+'\"',",
						"          End = '}',",
						"          EmpId_1 = EmpId,",
						"          FitrstName_1 = FitrstName) ~> derivedColumn1",
						"derivedColumn1 derive(OutputJSON = start+EmpId+','+FitrstName+End,",
						"          URL = \"https://reqres.in/api/users\") ~> derivedColumn3",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['API outputfile'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['InputJson'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmpId = EmpId_1,",
						"          FitrstName = FitrstName_1",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinTwoSources')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "Excel1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(source1@EmpId == source2@EmpId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          EmpId = source1@EmpId,",
						"          FitrstName = source1@FitrstName,",
						"          LastName = source1@LastName,",
						"          Address = source1@Address,",
						"          Gender = source1@Gender,",
						"          Salary = source1@Salary,",
						"          EmpId_2 = source1@EmpId,",
						"          FitrstName_2 = source1@FitrstName,",
						"          LastName_2 = source1@LastName,",
						"          Address_2 = source1@Address,",
						"          Gender_2 = source1@Gender,",
						"          Salary_2 = source1@Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['Demo.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NewBranchTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "Joindata"
						},
						{
							"dataset": {
								"referenceName": "outputParameterized",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string ('select1')",
						"}",
						"source(output(",
						"          EmpId as integer,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Joindata",
						"source(output(",
						"          EmpId as short,",
						"          FitrstName as string,",
						"          Gender as boolean,",
						"          Salary as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"Joindata aggregate(groupBy(Gender),",
						"     Count_of_emp_By_Gender = count(EmpId)) ~> aggregate1",
						"Joindata, source2 join(Joindata@EmpId == source2@EmpId,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['AggregatedCountByGender'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['JoinBasedOnNewBrach'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PivotTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(SalaryRange = iif(greaterOrEqual(toInteger(Salary),15000), 'High', 'Low')) ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(Gender,",
						"          SalaryRange),",
						"     CountEmployee = count(EmpId)) ~> aggregate1",
						"aggregate1 pivot(groupBy(Gender),",
						"     pivotBy(SalaryRange),",
						"     SalaryEmployees = sum(CountEmployee),",
						"     columnNaming: '$V$N',",
						"     lateral: false) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['Pivotdatatset'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SurrogateKeyTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(EMPID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['DataWithSurrogateColumn'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Union')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "outputParameterized",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "outputParameterized",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string",
						"}",
						"source(output(",
						"          EmpId as short,",
						"          FitrstName as string,",
						"          Gender as boolean,",
						"          Salary as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          EmpId as short,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as boolean,",
						"          Salary as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['union'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Window functions transformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(over(Gender),",
						"     asc(toInteger(EmpId), true),",
						"     AVG_Salary = avg(toInteger(Salary)),",
						"          Max_Salary = max(toInteger(Salary)),",
						"          Min_Salary = min(toInteger(Salary)),",
						"          Lag_salary = lag(toInteger(Salary)),",
						"          Lead_Salary = lead(toInteger(Salary)),",
						"          row_number = rowNumber(),",
						"          Rank = rank(),",
						"          DenseRank = denseRank(),",
						"          sum = sum(toInteger(Salary))) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['Windowfunction_data'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/conditional_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "Excelfileinput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "split1",
							"description": "splitting data based on gender and salary"
						},
						{
							"name": "select1"
						},
						{
							"name": "select3"
						},
						{
							"name": "select4"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Excelfileinput",
						"Excelfileinput split(equals(Gender, 'F') && greaterOrEqual(Salary, 10000),",
						"     equals(Gender, 'M') && greaterOrEqual(Salary, 10000),",
						"     disjoint: false) ~> split1@(Femaledatawithsalarygreaterthan10000, maledatawithsalarygreaterthan10000, Defaultdata)",
						"split1@Femaledatawithsalarygreaterthan10000 select(mapColumn(",
						"          EmpId,",
						"          FitrstName,",
						"          Gender,",
						"          Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"split1@Defaultdata select(mapColumn(",
						"          EmpId,",
						"          FitrstName,",
						"          LastName,",
						"          Gender,",
						"          Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select3",
						"split1@maledatawithsalarygreaterthan10000 select(mapColumn(",
						"          EmpId,",
						"          FitrstName,",
						"          LastName,",
						"          Address,",
						"          Gender,",
						"          Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select4",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['\\'select1\\''],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"select4 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['\\'select2\\''],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"select3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['\\'select3\\''],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RestResource1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     parameter1 as string ('?page=1')",
						"}",
						"source(output(",
						"          body as (data as (avatar as string, email as string, first_name as string, id as string, last_name as string), support as (text as string, url as string)),",
						"          headers as [string,string]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     httpMethod: 'GET',",
						"     timeout: 30,",
						"     requestInterval: 0,",
						"     headers: ['x-api-key' -> 'reqres-free-v1'],",
						"     paginationRules: ['supportRFC5988' -> 'true'],",
						"     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source1",
						"source1 select(mapColumn(",
						"          id = body.data.id,",
						"          email = body.data.email",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['API_outputfile'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/derivedcolumn')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Gender = iif(equals(Gender, 'M'),'Male',iif(equals(Gender, 'F'),'female',Gender)),",
						"          EMP_Name = concat(EmpId,concat(\"-\", FitrstName))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['Derivedcolumn'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookupTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "FullData"
						},
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "OnlyMale"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "cast2"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string",
						"}",
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FullData",
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OnlyMale",
						"FullData cast(output(",
						"          EmpId as integer",
						"     ),",
						"     errors: true) ~> cast1",
						"OnlyMale cast(output(",
						"          EmpId as integer",
						"     ),",
						"     errors: true) ~> cast2",
						"cast1, cast2 lookup(cast1@EmpId == cast2@EmpId,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['LookupTransformation'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/selectTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 select(mapColumn(",
						"          EmpId,",
						"          FitrstName,",
						"          LastName,",
						"          Salary,",
						"          Gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['SelectTransformationData'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sort_transfermation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "sortdata"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sort(desc(Salary, false),",
						"     asc(EmpId, false)) ~> sortdata",
						"sortdata sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['Sortdatatransformation'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/unPivottransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "outputParameterized",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputfileCSV",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     directory as string (' '),",
						"     FileName as string ('Pivotdatatset')",
						"}",
						"source(output(",
						"          Gender as string,",
						"          HighSalaryEmployees as short,",
						"          LowSalaryEmployees as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 unpivot(output(",
						"          SalaryRange as integer,",
						"          cont as short",
						"     ),",
						"     ungroupBy(Gender),",
						"     pivotValues: [\"Low\", \"High\"],",
						"     lateral: true,",
						"     ignoreNullPivots: true) ~> unpivot1",
						"unpivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmpId as string,",
						"          FitrstName as string,",
						"          LastName as string,",
						"          Address as string,",
						"          Gender as string,",
						"          Salary as string,",
						"          EmpId_2 as string,",
						"          FitrstName_2 as string,",
						"          LastName_2 as string,",
						"          Address_2 as string,",
						"          Gender_2 as string,",
						"          Salary_2 as string",
						"     ),",
						"     partitionFileNames:['unpivotdatatransformation'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conditional_split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "conditional_split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Excelfileinput": {},
									"sink1": {},
									"sink2": {},
									"sink3": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Filename": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dataflowruns"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-11T20:09:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/conditional_split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pivot_unpivot_transformations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "PivotTransformation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Dataflowruns"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-12T18:53:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/PivotTransformation')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestAPI_POST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JSON_inputdata",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"dataset": {
								"referenceName": "demoexceldata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Web1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Lookup2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"x-api-key": "reqres-free-v1"
										},
										"url": "https://reqres.in/api/users",
										"body": {
											"value": "{\n  \"name\": \"@{item().EmpId}\",\n  \"job\": \"@{item().FitrstName}\"\n}\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Web2",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Web1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"x-api-key": "reqres-free-v1"
										},
										"url": "https://reqres.in/api/users",
										"body": {
											"value": "{\n  \"name\": \"@{item().FitrstName}\",\n  \"job\": \"@{activity('Web1').output.id}\"\n}\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Lookup2",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"dataset": {
											"referenceName": "demoexceldata",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [
										{
											"activity": "Web1",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"scripts": [],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-07-23T13:44:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/JSON_inputdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/alter_row_transformationPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AlterRowTransformation",
								"type": "DataFlowReference",
								"parameters": {
									"TableName": {
										"value": "'@{pipeline().parameters.TableName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"source3": {},
									"sink1": {
										"tablename": {
											"value": "@pipeline().parameters.TableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Dataflowruns"
				},
				"annotations": [],
				"lastPublishTime": "2025-07-14T18:09:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/archive_pipeline_inside_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "File_Name",
							"value": "Demo.csv"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "parameterizeddataset",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.Directory_input",
										"type": "Expression"
									},
									"Filename": {
										"value": "@variables('File_Name')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "parameterizeddataset",
								"type": "DatasetReference",
								"parameters": {
									"Container": {
										"value": "@pipeline().parameters.Container",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.Directory_output",
										"type": "Expression"
									},
									"Filename": {
										"value": "@concat(variables('File_Name'),'_',pipeline().TriggerTime)",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "deletefile_pipeline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"Directory": {
									"value": "@pipeline().parameters.Container",
									"type": "Expression"
								},
								"Container": {
									"value": "@pipeline().parameters.Directory_input",
									"type": "Expression"
								},
								"FileName": {
									"value": "@variables('File_Name')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Container": {
						"type": "string"
					},
					"Directory_input": {
						"type": "string"
					},
					"Directory_output": {
						"type": "string"
					}
				},
				"variables": {
					"File_Name": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Pipeline_activities"
				},
				"annotations": [],
				"lastPublishTime": "2025-06-18T11:04:44Z"
			},
			"dependsOn": []
		}
	]
}