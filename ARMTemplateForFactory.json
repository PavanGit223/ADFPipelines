{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "ADFFreeeinstancepavankumarthirunagari"
        },
        "AzureBlobStorage1_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
        },
        "SqlServer1_password": {
            "type": "secureString",
            "metadata": "Secure string for 'password' of 'SqlServer1'"
        },
        "AzureSqlDatabase1_password": {
            "type": "secureString",
            "metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
        },
        "SqlServer1_properties_typeProperties_server": {
            "type": "string",
            "defaultValue": "pavan-sqlbdserver.database.windows.net"
        },
        "SqlServer1_properties_typeProperties_database": {
            "type": "string",
            "defaultValue": "10.42.4.144"
        },
        "SqlServer1_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "test_sqlbd_server"
        },
        "AzureSqlDatabase1_properties_typeProperties_server": {
            "type": "string",
            "defaultValue": "pavan-sqlbdserver.database.windows.net"
        },
        "AzureSqlDatabase1_properties_typeProperties_database": {
            "type": "string",
            "defaultValue": "10.42.4.144"
        },
        "AzureSqlDatabase1_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "test_sqlbd_server"
        },
        "SqlServer2Parameterized_properties_typeProperties_server": {
            "type": "string",
            "defaultValue": "@{linkedService().servername}"
        },
        "SqlServer2Parameterized_properties_typeProperties_database": {
            "type": "string",
            "defaultValue": "@{linkedService().databasename}"
        },
        "SqlServer2Parameterized_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "@{linkedService().username}"
        },
        "RestService1_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://reqres.in/api/users"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/pipeline1')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Data flow1",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [
                            {
                                "activity": "Copy data1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "JoinTwoSources",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [
                            {
                                "name": "Source",
                                "value": "inputfiles//Demo.xlsx"
                            },
                            {
                                "name": "Destination",
                                "value": "outputfiles//copy_file"
                            }
                        ],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "additionalColumns": [
                                    {
                                        "name": "Filepath",
                                        "value": "$$FILEPATH"
                                    }
                                ],
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": false,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings",
                                    "copyBehavior": "PreserveHierarchy"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "enableSkipIncompatibleRow": false,
                            "logSettings": {
                                "enableCopyActivityLog": true,
                                "copyActivityLogSettings": {
                                    "logLevel": "Info",
                                    "enableReliableLogging": false
                                },
                                "logLocationSettings": {
                                    "linkedServiceName": {
                                        "referenceName": "AzureBlobStorage1",
                                        "type": "LinkedServiceReference"
                                    },
                                    "path": "outputfiles"
                                }
                            },
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "EmpId",
                                            "type": "Int32",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "EmpId",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "FitrstName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "FitrstName",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "LastName",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "LastName",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Address",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Address",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Gender",
                                            "type": "String",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Gender",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Salary",
                                            "type": "Decimal",
                                            "physicalType": "String"
                                        },
                                        "sink": {
                                            "name": "Salary",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "Filepath",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "Filepath",
                                            "type": "String",
                                            "physicalType": "String"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "Excel1",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "outputParameterized",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "other"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/JoinTwoSources')]",
                "[concat(variables('factoryId'), '/datasets/Excel1')]",
                "[concat(variables('factoryId'), '/datasets/outputParameterized')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline2')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "dataflow2",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "Filter_data",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "tableinput": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "other"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/Filter_data')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline_parameterized')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "additionalColumns": [
                                    {
                                        "name": "ADFNAME",
                                        "value": {
                                            "value": "@pipeline().DataFactory",
                                            "type": "Expression"
                                        }
                                    }
                                ],
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "SqlServerSink",
                                "writeBehavior": "upsert",
                                "upsertSettings": {
                                    "useTempDB": true,
                                    "keys": [
                                        "EMP_ID"
                                    ]
                                },
                                "sqlWriterUseTableLock": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "mappings": [
                                    {
                                        "source": {
                                            "name": "EMP_ID",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "EMP_ID",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "EmpName",
                                            "type": "String",
                                            "physicalType": "nvarchar"
                                        },
                                        "sink": {
                                            "name": "EmpName",
                                            "type": "String",
                                            "physicalType": "varchar"
                                        }
                                    },
                                    {
                                        "source": {
                                            "name": "ADFNAME",
                                            "type": "String"
                                        },
                                        "sink": {
                                            "name": "ADFNAME"
                                        }
                                    }
                                ],
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "SqlServerTable1Parameterized",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": {
                                        "value": "@pipeline().parameters.tablename_form",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "SqlServerTable1Parameterized",
                                "type": "DatasetReference",
                                "parameters": {
                                    "tablename": {
                                        "value": "@pipeline().parameters.tablename_to",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "tablename_form": {
                        "type": "string"
                    },
                    "tablename_to": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/SqlServerTable1Parameterized')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline_variables_basedoneventinblob')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "FileType",
                            "value": {
                                "value": "@replace(pipeline().parameters.Filename,'sales','')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "If Condition1",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Append variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@equals(variables('FileType'),'Demo')",
                                "type": "Expression"
                            },
                            "ifFalseActivities": [
                                {
                                    "name": "Copy data2",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageWriteSettings",
                                                "copyBehavior": "MergeFiles"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "outputfileCSV",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "outputParameterized",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileNmae": {
                                                    "value": "@pipeline().parameters.Filename",
                                                    "type": "Expression"
                                                },
                                                "Directory": {
                                                    "value": "@pipeline().parameters.Filename",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ],
                            "ifTrueActivities": [
                                {
                                    "name": "Copy data1",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "DelimitedTextSource",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "outputfileCSV",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "outputParameterized",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileNmae": {
                                                    "value": "@pipeline().parameters.Filename",
                                                    "type": "Expression"
                                                },
                                                "Directory": {
                                                    "value": "@pipeline().parameters.Filename",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "Append variable1",
                        "type": "AppendVariable",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "listoffiles",
                            "value": "Demo1"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Filename": {
                        "type": "string",
                        "defaultValue": "Demo"
                    }
                },
                "variables": {
                    "FileType": {
                        "type": "String"
                    },
                    "listoffiles": {
                        "type": "Array"
                    }
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]",
                "[concat(variables('factoryId'), '/datasets/outputParameterized')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/deletefile_pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Delete1",
                        "type": "Delete",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.Directory",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@pipeline().parameters.FileName",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "logStorageSettings": {
                                "linkedServiceName": {
                                    "referenceName": "AzureBlobStorage1",
                                    "type": "LinkedServiceReference"
                                },
                                "path": "logs"
                            },
                            "enableLogging": true,
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Directory": {
                        "type": "string"
                    },
                    "Container": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/parameterizeddataset')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/archive_pipeline_inside_pipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "File_Name",
                            "value": "Demo.csv"
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings",
                                    "copyBehavior": "PreserveHierarchy"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.Directory_input",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@variables('File_Name')",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.Directory_output",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@concat(variables('File_Name'),'_',pipeline().TriggerTime)",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Execute Pipeline1",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Copy data1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "deletefile_pipeline",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "Directory": {
                                    "value": "@pipeline().parameters.Container",
                                    "type": "Expression"
                                },
                                "Container": {
                                    "value": "@pipeline().parameters.Directory_input",
                                    "type": "Expression"
                                },
                                "FileName": {
                                    "value": "@variables('File_Name')",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Container": {
                        "type": "string"
                    },
                    "Directory_input": {
                        "type": "string"
                    },
                    "Directory_output": {
                        "type": "string"
                    }
                },
                "variables": {
                    "File_Name": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/parameterizeddataset')]",
                "[concat(variables('factoryId'), '/pipelines/deletefile_pipeline')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DeleteNdaysoldfiles')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Filter\nForeach\nGetmetadata and \nif then else activities\n",
                "activities": [
                    {
                        "name": "Get Metadata1",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.Directory",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@pipeline().parameters.Filename",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Metadata1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Metadata1').output.childItems",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "If Condition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Metadata2",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@greaterOrEquals(activity('Get Metadata2').output.lastModified,adddays(utcnow(),-10))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Delete1_copy1",
                                                "type": "Delete",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "dataset": {
                                                        "referenceName": "parameterizeddataset",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "Container": {
                                                                "value": "@pipeline().parameters.Container",
                                                                "type": "Expression"
                                                            },
                                                            "directory": {
                                                                "value": "@pipeline().parameters.Directory",
                                                                "type": "Expression"
                                                            },
                                                            "Filename": {
                                                                "value": "@activity('Get Metadata2').output.itemName",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    },
                                                    "logStorageSettings": {
                                                        "linkedServiceName": {
                                                            "referenceName": "AzureBlobStorage1",
                                                            "type": "LinkedServiceReference"
                                                        },
                                                        "path": "logs"
                                                    },
                                                    "enableLogging": true,
                                                    "storeSettings": {
                                                        "type": "AzureBlobStorageReadSettings",
                                                        "recursive": true,
                                                        "enablePartitionDiscovery": false
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Get Metadata2",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "parameterizeddataset",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Container": {
                                                    "value": "@pipeline().parameters.Container",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.Directory",
                                                    "type": "Expression"
                                                },
                                                "Filename": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "lastModified",
                                            "itemName"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Container": {
                        "type": "string"
                    },
                    "Directory": {
                        "type": "string"
                    },
                    "Filename": {
                        "type": "string"
                    }
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/parameterizeddataset')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/File_exsists_through_metadata')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "V_FileName",
                        "type": "SetVariable",
                        "dependsOn": [],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "V_FIlename",
                            "value": {
                                "value": "@pipeline().parameters.P_Filename",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get Metadata1",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "V_FileName",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.Directory",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@pipeline().parameters.Filename",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Until2",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.Container",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.Directory",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@pipeline().parameters.P_Filename",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": "outputfiles",
                                    "directory": {
                                        "value": "@pipeline().parameters.Directory",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@pipeline().parameters.P_Filename",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    },
                    {
                        "name": "Wait1",
                        "type": "Wait",
                        "dependsOn": [
                            {
                                "activity": "Get Metadata1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 10
                        }
                    },
                    {
                        "name": "Until2",
                        "type": "Until",
                        "dependsOn": [
                            {
                                "activity": "Wait1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@bool(variables('File_exsists'))",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Get Metadata2",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "parameterizeddataset",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Container": {
                                                    "value": "@pipeline().parameters.Container",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.Directory",
                                                    "type": "Expression"
                                                },
                                                "Filename": {
                                                    "value": "@pipeline().parameters.P_Filename",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "exists"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "DelimitedTextReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "If Condition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Metadata2",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@bool(activity('Get Metadata2').output.exists)",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Wait2",
                                                "type": "Wait",
                                                "dependsOn": [],
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "waitTimeInSeconds": 100
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Set variable1",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "File_exsists",
                                                    "value": "True"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ],
                            "timeout": "0.12:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "P_Filename": {
                        "type": "String"
                    },
                    "Directory": {
                        "type": "string"
                    },
                    "Container": {
                        "type": "string"
                    },
                    "Filename": {
                        "type": "string"
                    }
                },
                "variables": {
                    "V_FIlename": {
                        "type": "String"
                    },
                    "File_exsists": {
                        "type": "String",
                        "defaultValue": "false"
                    }
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/parameterizeddataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Web_swtich_Validate_activity')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": "https://dummy.restapiexample.com/api/v1/employees"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:29Z"
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SwitchActivity')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Switch1",
                        "type": "Switch",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "on": {
                                "value": "@pipeline().parameters.InputFolderName",
                                "type": "Expression"
                            },
                            "cases": [
                                {
                                    "value": "Output1",
                                    "activities": [
                                        {
                                            "name": "Copy data1",
                                            "type": "Copy",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "source": {
                                                    "type": "DelimitedTextSource",
                                                    "storeSettings": {
                                                        "type": "AzureBlobStorageReadSettings",
                                                        "recursive": true,
                                                        "enablePartitionDiscovery": false
                                                    },
                                                    "formatSettings": {
                                                        "type": "DelimitedTextReadSettings"
                                                    }
                                                },
                                                "sink": {
                                                    "type": "DelimitedTextSink",
                                                    "storeSettings": {
                                                        "type": "AzureBlobStorageWriteSettings"
                                                    },
                                                    "formatSettings": {
                                                        "type": "DelimitedTextWriteSettings",
                                                        "quoteAllText": true,
                                                        "fileExtension": ".txt"
                                                    }
                                                },
                                                "enableStaging": false,
                                                "translator": {
                                                    "type": "TabularTranslator",
                                                    "typeConversion": true,
                                                    "typeConversionSettings": {
                                                        "allowDataTruncation": true,
                                                        "treatBooleanAsNumber": false
                                                    }
                                                }
                                            },
                                            "inputs": [
                                                {
                                                    "referenceName": "parameterizeddataset",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "Container": {
                                                            "value": "@pipeline().parameters.ContainerName",
                                                            "type": "Expression"
                                                        },
                                                        "directory": {
                                                            "value": "@pipeline().parameters.DirectoryName",
                                                            "type": "Expression"
                                                        },
                                                        "Filename": {
                                                            "value": "@pipeline().parameters.FileName",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ],
                                            "outputs": [
                                                {
                                                    "referenceName": "parameterizeddataset",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "Container": {
                                                            "value": "@pipeline().parameters.OutputFolder",
                                                            "type": "Expression"
                                                        },
                                                        "directory": {
                                                            "value": "@pipeline().parameters.DirectoryName",
                                                            "type": "Expression"
                                                        },
                                                        "Filename": {
                                                            "value": "@pipeline().parameters.InputFolderName",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "value": "Output2",
                                    "activities": [
                                        {
                                            "name": "Copy data2",
                                            "type": "Copy",
                                            "dependsOn": [],
                                            "policy": {
                                                "timeout": "0.12:00:00",
                                                "retry": 0,
                                                "retryIntervalInSeconds": 30,
                                                "secureOutput": false,
                                                "secureInput": false
                                            },
                                            "userProperties": [],
                                            "typeProperties": {
                                                "source": {
                                                    "type": "DelimitedTextSource",
                                                    "storeSettings": {
                                                        "type": "AzureBlobStorageReadSettings",
                                                        "recursive": true,
                                                        "enablePartitionDiscovery": false
                                                    },
                                                    "formatSettings": {
                                                        "type": "DelimitedTextReadSettings"
                                                    }
                                                },
                                                "sink": {
                                                    "type": "DelimitedTextSink",
                                                    "storeSettings": {
                                                        "type": "AzureBlobStorageWriteSettings"
                                                    },
                                                    "formatSettings": {
                                                        "type": "DelimitedTextWriteSettings",
                                                        "quoteAllText": true,
                                                        "fileExtension": ".txt"
                                                    }
                                                },
                                                "enableStaging": false,
                                                "translator": {
                                                    "type": "TabularTranslator",
                                                    "typeConversion": true,
                                                    "typeConversionSettings": {
                                                        "allowDataTruncation": true,
                                                        "treatBooleanAsNumber": false
                                                    }
                                                }
                                            },
                                            "inputs": [
                                                {
                                                    "referenceName": "parameterizeddataset",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "Container": {
                                                            "value": "@pipeline().parameters.ContainerName",
                                                            "type": "Expression"
                                                        },
                                                        "directory": {
                                                            "value": "@pipeline().parameters.DirectoryName",
                                                            "type": "Expression"
                                                        },
                                                        "Filename": {
                                                            "value": "@pipeline().parameters.FileName",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ],
                                            "outputs": [
                                                {
                                                    "referenceName": "parameterizeddataset",
                                                    "type": "DatasetReference",
                                                    "parameters": {
                                                        "Container": {
                                                            "value": "@pipeline().parameters.archivefolder",
                                                            "type": "Expression"
                                                        },
                                                        "directory": {
                                                            "value": "@pipeline().parameters.DirectoryName",
                                                            "type": "Expression"
                                                        },
                                                        "Filename": {
                                                            "value": "@pipeline().parameters.FileName",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "InputFolderName": {
                        "type": "string",
                        "defaultValue": "Output2"
                    },
                    "FileName": {
                        "type": "string",
                        "defaultValue": "Demo.xlsx"
                    },
                    "DirectoryName": {
                        "type": "string",
                        "defaultValue": " "
                    },
                    "ContainerName": {
                        "type": "string",
                        "defaultValue": "inputfiles"
                    },
                    "OutputFolder": {
                        "type": "string",
                        "defaultValue": "outputfiles"
                    },
                    "archivefolder": {
                        "type": "string",
                        "defaultValue": "archive"
                    }
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/parameterizeddataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Validate_activity')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Validation1",
                        "type": "Validation",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.ContainerInput",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.DirectoryName",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@pipeline().parameters.FileName",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "timeout": "0.12:00:00",
                            "sleep": 10,
                            "minimumSize": 8
                        }
                    },
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Validation1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.ContainerInput",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.DirectoryName",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@pipeline().parameters.FileName",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "parameterizeddataset",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Container": {
                                        "value": "@pipeline().parameters.ContainerOutput",
                                        "type": "Expression"
                                    },
                                    "directory": {
                                        "value": "@pipeline().parameters.DirectoryName",
                                        "type": "Expression"
                                    },
                                    "Filename": {
                                        "value": "@pipeline().parameters.FileName",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "DirectoryName": {
                        "type": "string",
                        "defaultValue": "  "
                    },
                    "FileName": {
                        "type": "string",
                        "defaultValue": "While1.xlsx"
                    },
                    "ContainerOutput": {
                        "type": "string",
                        "defaultValue": "archive"
                    },
                    "ContainerInput": {
                        "type": "string",
                        "defaultValue": "inputfiles"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/parameterizeddataset')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Conditional_split')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Data flow1",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "conditional_split",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "Excelfileinput": {},
                                    "sink1": {},
                                    "sink2": {},
                                    "sink3": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "Filename": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Dataflowruns"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/conditional_split')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Pivot_unpivot_transformations')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Data flow1",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "PivotTransformation",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Dataflowruns"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/PivotTransformation')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/alter_row_transformationPipeline')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Data flow1",
                        "type": "ExecuteDataFlow",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "AlterRowTransformation",
                                "type": "DataFlowReference",
                                "parameters": {
                                    "TableName": {
                                        "value": "'@{pipeline().parameters.TableName}'",
                                        "type": "Expression"
                                    }
                                },
                                "datasetParameters": {
                                    "source1": {},
                                    "source2": {},
                                    "source3": {},
                                    "sink1": {
                                        "tablename": {
                                            "value": "@pipeline().parameters.TableName",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "TableName": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Dataflowruns"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/AlterRowTransformation')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/unzipfileswhicharelatest')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Get Metadata1",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "Zipfiles",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Metadata1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Metadata1').output.childItems",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Get Metadata2",
                                    "type": "GetMetadata",
                                    "dependsOn": [
                                        {
                                            "activity": "Script1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "Zipfiles_copy1",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "FileName": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "itemName",
                                            "lastModified"
                                        ],
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "If Condition1",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Metadata2",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(\n    formatDateTime(string(activity('Get Metadata2').output.lastModified), 'dd-MM-yyyy'),\n    formatDateTime(activity('Script1').output.resultSets[0].rows[0].CurrentDate, 'dd-MM-yyyy')\n)\n",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy data1",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "BinarySource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobStorageReadSettings",
                                                            "recursive": true
                                                        },
                                                        "formatSettings": {
                                                            "type": "BinaryReadSettings",
                                                            "compressionProperties": {
                                                                "type": "ZipDeflateReadSettings"
                                                            }
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "BinarySink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobStorageWriteSettings"
                                                        }
                                                    },
                                                    "enableStaging": false
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "Zipfiles_copy1",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "FileName": {
                                                                "value": "@activity('Get Metadata2').output.itemName",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "Zipfiles_copy1",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "FileName": "File.txt"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Script1",
                                    "type": "Script",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "linkedServiceName": {
                                        "referenceName": "AzureSqlDatabase1",
                                        "type": "LinkedServiceReference"
                                    },
                                    "typeProperties": {
                                        "scripts": [
                                            {
                                                "type": "Query",
                                                "text": "SELECT CAST(SYSDATETIME() AS DATE) AS CurrentDate"
                                            }
                                        ],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Zipfiles')]",
                "[concat(variables('factoryId'), '/datasets/Zipfiles_copy1')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/IncrementalFileCopy')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [
                            {
                                "activity": "Script1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "BinarySource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "modifiedDatetimeStart": {
                                        "value": "@addDays(activity('Script1').output.resultSets[0].rows[0].CurrentDate,-2)",
                                        "type": "Expression"
                                    },
                                    "modifiedDatetimeEnd": {
                                        "value": "@utcNow()",
                                        "type": "Expression"
                                    },
                                    "wildcardFileName": ".*txt",
                                    "deleteFilesAfterCompletion": false
                                },
                                "formatSettings": {
                                    "type": "BinaryReadSettings",
                                    "compressionProperties": {
                                        "type": "ZipDeflateReadSettings",
                                        "preserveZipFileNameAsFolder": true
                                    }
                                }
                            },
                            "sink": {
                                "type": "BinarySink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "Zipfiles",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "outputfolder",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    },
                    {
                        "name": "Script1",
                        "type": "Script",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "AzureSqlDatabase1",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "type": "Query",
                                    "text": "SELECT CAST(SYSDATETIME() AS DATE) AS CurrentDate\n"
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Zipfiles')]",
                "[concat(variables('factoryId'), '/datasets/outputfolder')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ETL_LOAD_HIST')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Script1",
                        "type": "Script",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "AzureSqlDatabase1",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "parameters": [
                                        {
                                            "name": "DF_Name",
                                            "type": "String",
                                            "value": {
                                                "value": "@pipeline().DataFactory",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "Pipeline_Name",
                                            "type": "String",
                                            "value": {
                                                "value": "@pipeline().Pipeline",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "Pipeline_runID",
                                            "type": "String",
                                            "value": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "Trigger_Name",
                                            "type": "String",
                                            "value": {
                                                "value": "@pipeline().TriggerName",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "Trigger_Type",
                                            "type": "String",
                                            "value": {
                                                "value": "@pipeline().TriggerType",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "Trigger_time",
                                            "type": "Datetime",
                                            "value": {
                                                "value": "@pipeline().TriggerTime",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        },
                                        {
                                            "name": "Status",
                                            "type": "String",
                                            "value": {
                                                "value": "R",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        }
                                    ],
                                    "type": "Query",
                                    "text": "INSERT INTO ETL_LOAD_HIST\n(DF_Name, Pipeline_Name, Pipeline_runID, Trigger_Name, Trigger_Type, Trigger_time, Status)\nVALUES (@DF_Name, @Pipeline_Name, @Pipeline_runID, @Trigger_Name, @Trigger_Type, @Trigger_time, @Status)\n"
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    },
                    {
                        "name": "Script2",
                        "type": "Script",
                        "dependsOn": [
                            {
                                "activity": "Script1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "linkedServiceName": {
                            "referenceName": "AzureSqlDatabase1",
                            "type": "LinkedServiceReference"
                        },
                        "typeProperties": {
                            "scripts": [
                                {
                                    "parameters": [
                                        {
                                            "name": "pipelineRunID",
                                            "type": "String",
                                            "value": {
                                                "value": "@pipeline().RunId",
                                                "type": "Expression"
                                            },
                                            "direction": "Input"
                                        }
                                    ],
                                    "type": "Query",
                                    "text": "UPDATE ETL_LOAD_HIST SET\nStatus = 'S'\nWHERE Pipeline_runID =@pipelineRunID\nand [Status] = 'R'"
                                }
                            ],
                            "scriptBlockExecutionTimeout": "02:00:00"
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Check_file_exssitence_create_newfile_for_log')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Wait1",
                        "type": "Wait",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "waitTimeInSeconds": 1
                        }
                    },
                    {
                        "name": "Set variable1",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Wait1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Log_FileName",
                            "value": {
                                "value": "@concat(formatDateTime(utcNow(),'YYYY-MM-dd'),'_log.csv')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get Metadata1",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "Set variable1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "outputParameterized",
                                "type": "DatasetReference",
                                "parameters": {
                                    "FileNmae": {
                                        "value": "@variables('Log_FileName')",
                                        "type": "Expression"
                                    },
                                    "Directory": " "
                                }
                            },
                            "fieldList": [
                                "exists"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If Condition1",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Get Metadata1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@activity('Get Metadata1').output.exists",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "variables": {
                    "Log_FileName": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "Pipeline_activities"
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:31Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/outputParameterized')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestAPIData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Web1",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": "https://reqres.in/api/users?page=2"
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Web1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@range(1,activity('Web1').output.total_pages)",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Copy data1",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "RestSource",
                                            "httpRequestTimeout": "00:01:40",
                                            "requestInterval": "00.00:00:00.010",
                                            "requestMethod": "GET",
                                            "additionalHeaders": {
                                                "x-api-key": "reqres-free-v1"
                                            },
                                            "paginationRules": {
                                                "supportRFC5988": "true"
                                            }
                                        },
                                        "sink": {
                                            "type": "DelimitedTextSink",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageWriteSettings"
                                            },
                                            "formatSettings": {
                                                "type": "DelimitedTextWriteSettings",
                                                "quoteAllText": true,
                                                "fileExtension": ".txt"
                                            }
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "mappings": [
                                                {
                                                    "source": {
                                                        "path": "[['id']"
                                                    },
                                                    "sink": {
                                                        "name": "id"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['name']"
                                                    },
                                                    "sink": {
                                                        "name": "name"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['year']"
                                                    },
                                                    "sink": {
                                                        "name": "year"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['color']"
                                                    },
                                                    "sink": {
                                                        "name": "color"
                                                    }
                                                },
                                                {
                                                    "source": {
                                                        "path": "[['pantone_value']"
                                                    },
                                                    "sink": {
                                                        "name": "pantone_value"
                                                    }
                                                }
                                            ],
                                            "collectionReference": "$['data']"
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "RestResource1",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "queryString": {
                                                    "value": "@concat('?page=',item())",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "api_csv",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "API_FILENAME": {
                                                    "value": "@concat('API_Output_',item())",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "queryString": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource1')]",
                "[concat(variables('factoryId'), '/datasets/api_csv')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestAPI_POST')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Data flow1",
                        "type": "ExecuteDataFlow",
                        "state": "Inactive",
                        "onInactiveMarkAs": "Succeeded",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataflow": {
                                "referenceName": "JSON_inputdata",
                                "type": "DataFlowReference",
                                "parameters": {},
                                "datasetParameters": {
                                    "source1": {},
                                    "sink1": {},
                                    "sink2": {}
                                }
                            },
                            "staging": {},
                            "compute": {
                                "coreCount": 8,
                                "computeType": "General"
                            },
                            "traceLevel": "Fine"
                        }
                    },
                    {
                        "name": "Lookup1",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Data flow1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "ExcelSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "enablePartitionDiscovery": false
                                }
                            },
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference",
                                "parameters": {}
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "ForEach1",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Lookup1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Lookup1').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Web1",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Lookup2",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "x-api-key": "reqres-free-v1"
                                        },
                                        "url": "https://reqres.in/api/users",
                                        "body": {
                                            "value": "{\n  \"name\": \"@{item().EmpId}\",\n  \"job\": \"@{item().FitrstName}\"\n}\n",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Web2",
                                    "type": "WebActivity",
                                    "dependsOn": [
                                        {
                                            "activity": "Web1",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "method": "POST",
                                        "headers": {
                                            "x-api-key": "reqres-free-v1"
                                        },
                                        "url": "https://reqres.in/api/users",
                                        "body": {
                                            "value": "{\n  \"name\": \"@{item().FitrstName}\",\n  \"job\": \"@{activity('Web1').output.id}\"\n}\n",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Lookup2",
                                    "type": "Lookup",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "ExcelSource",
                                            "storeSettings": {
                                                "type": "AzureBlobStorageReadSettings",
                                                "recursive": true,
                                                "enablePartitionDiscovery": false
                                            }
                                        },
                                        "dataset": {
                                            "referenceName": "demoexceldata",
                                            "type": "DatasetReference",
                                            "parameters": {}
                                        }
                                    }
                                },
                                {
                                    "name": "Script1",
                                    "type": "Script",
                                    "state": "Inactive",
                                    "onInactiveMarkAs": "Succeeded",
                                    "dependsOn": [
                                        {
                                            "activity": "Web1",
                                            "dependencyConditions": [
                                                "Skipped"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "scripts": [],
                                        "scriptBlockExecutionTimeout": "02:00:00"
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "annotations": [],
                "lastPublishTime": "2025-07-23T14:22:32Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/dataflows/JSON_inputdata')]",
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/pipeline3')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy data1",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "DelimitedTextSource",
                                "storeSettings": {
                                    "type": "AzureBlobStorageReadSettings",
                                    "recursive": true,
                                    "wildcardFileName": "input.*",
                                    "enablePartitionDiscovery": false
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextReadSettings"
                                }
                            },
                            "sink": {
                                "type": "DelimitedTextSink",
                                "storeSettings": {
                                    "type": "AzureBlobStorageWriteSettings",
                                    "copyBehavior": "MergeFiles"
                                },
                                "formatSettings": {
                                    "type": "DelimitedTextWriteSettings",
                                    "quoteAllText": true,
                                    "fileExtension": ".txt"
                                }
                            },
                            "enableStaging": false
                        },
                        "inputs": [
                            {
                                "referenceName": "ReadingFolder",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Filename": {
                                        "value": "input.*",
                                        "type": "Expression"
                                    }
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference",
                                "parameters": {}
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "annotations": [],
                "lastPublishTime": "2025-07-25T19:10:19Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ReadingFolder')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SqlServer1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "server": "[parameters('SqlServer1_properties_typeProperties_server')]",
                    "database": "[parameters('SqlServer1_properties_typeProperties_database')]",
                    "encrypt": "mandatory",
                    "trustServerCertificate": false,
                    "authenticationType": "SQL",
                    "userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('SqlServer1_password')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
                    "database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
                    "encrypt": "mandatory",
                    "trustServerCertificate": false,
                    "authenticationType": "SQL",
                    "userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
                    "password": {
                        "type": "SecureString",
                        "value": "[parameters('AzureSqlDatabase1_password')]"
                    }
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/SqlServer2Parameterized')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "servername": {
                        "type": "string"
                    },
                    "databasename": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "server": "[parameters('SqlServer2Parameterized_properties_typeProperties_server')]",
                    "database": "[parameters('SqlServer2Parameterized_properties_typeProperties_database')]",
                    "encrypt": "mandatory",
                    "trustServerCertificate": false,
                    "authenticationType": "SQL",
                    "userName": "[parameters('SqlServer2Parameterized_properties_typeProperties_userName')]",
                    "password": "@{linkedService().password}"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestService1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "RestService",
                "typeProperties": {
                    "url": "[parameters('RestService1_properties_typeProperties_url')]",
                    "enableServerCertificateValidation": true,
                    "authenticationType": "Anonymous"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/Excel1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "DemoSheet",
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": "Demo.xlsx",
                        "container": "inputfiles"
                    },
                    "firstRowAsHeader": true
                },
                "schema": [
                    {
                        "name": "EmpId",
                        "type": "String"
                    },
                    {
                        "name": "FitrstName",
                        "type": "String"
                    },
                    {
                        "name": "LastName",
                        "type": "String"
                    },
                    {
                        "name": "Address",
                        "type": "String"
                    },
                    {
                        "name": "Gender",
                        "type": "String"
                    },
                    {
                        "name": "Salary",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureSqlDatabase1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [
                    {
                        "name": "EMP_ID",
                        "type": "varchar"
                    },
                    {
                        "name": "EmpName",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "EMP_DATA"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/parameterizeddataset')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Container": {
                        "type": "String"
                    },
                    "directory": {
                        "type": "String"
                    },
                    "Filename": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().Filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().Container",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SqlServerTable1Parameterized')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SqlServer2Parameterized",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "servername": "pavan-sqlbdserver.database.windows.net",
                        "databasename": "10.42.4.144",
                        "username": "test_sqlbd_server",
                        "password": "Sql@66204"
                    }
                },
                "parameters": {
                    "tablename": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [],
                "typeProperties": {
                    "table": {
                        "value": "@dataset().tablename",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/SqlServer2Parameterized')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dataset_variable_based_file_load')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "container": {
                        "type": "String"
                    },
                    "Directory": {
                        "type": "String"
                    },
                    "filename": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().container",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().Directory",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ReadingFolder')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Filename": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "inputfiles"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PassingFilename')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Filename": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().Filename",
                            "type": "Expression"
                        },
                        "container": "inputfiles"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Json_dataset_parameterized')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Container": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": " ",
                        "container": {
                            "value": "@dataset().Container",
                            "type": "Expression"
                        }
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/demoexceldata')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Excel",
                "typeProperties": {
                    "sheetName": "DemoSheet",
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": "Demo.xlsx",
                        "container": "inputfiles"
                    },
                    "firstRowAsHeader": true
                },
                "schema": [
                    {
                        "name": "EmpId",
                        "type": "String"
                    },
                    {
                        "name": "FitrstName",
                        "type": "String"
                    },
                    {
                        "name": "LastName",
                        "type": "String"
                    },
                    {
                        "name": "Address",
                        "type": "String"
                    },
                    {
                        "name": "Gender",
                        "type": "String"
                    },
                    {
                        "name": "Salary",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/outputfileCSV')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "Demo.csv",
                            "type": "Expression"
                        },
                        "folderPath": " ",
                        "container": "outputfiles"
                    },
                    "columnDelimiter": ",",
                    "rowDelimiter": "\n",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "EmpId",
                        "type": "String"
                    },
                    {
                        "name": "FitrstName",
                        "type": "String"
                    },
                    {
                        "name": "LastName",
                        "type": "String"
                    },
                    {
                        "name": "Address",
                        "type": "String"
                    },
                    {
                        "name": "Gender",
                        "type": "String"
                    },
                    {
                        "name": "Salary",
                        "type": "String"
                    },
                    {
                        "name": "EmpId_2",
                        "type": "String"
                    },
                    {
                        "name": "FitrstName_2",
                        "type": "String"
                    },
                    {
                        "name": "LastName_2",
                        "type": "String"
                    },
                    {
                        "name": "Address_2",
                        "type": "String"
                    },
                    {
                        "name": "Gender_2",
                        "type": "String"
                    },
                    {
                        "name": "Salary_2",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/outputParameterized')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FileNmae": {
                        "type": "string"
                    },
                    "Directory": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().FileNmae",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().Directory",
                            "type": "Expression"
                        },
                        "container": "outputfiles"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Zipfiles')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "inputfiles"
                    },
                    "compression": {
                        "type": "ZipDeflate",
                        "level": "Fastest"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Zipfiles_copy1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "FileName": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "container": "inputfiles"
                    },
                    "compression": {
                        "type": "ZipDeflate",
                        "level": "Fastest"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/outputfolder')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "container": "outputfiles"
                    },
                    "compression": {
                        "type": "ZipDeflate"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/api_csv')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "API_FILENAME": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().API_FILENAME",
                            "type": "Expression"
                        },
                        "container": "outputfiles"
                    },
                    "columnDelimiter": ",",
                    "escapeChar": "\\",
                    "firstRowAsHeader": true,
                    "quoteChar": "\""
                },
                "schema": [
                    {
                        "name": "EmpId",
                        "type": "String"
                    },
                    {
                        "name": "FitrstName",
                        "type": "String"
                    },
                    {
                        "name": "LastName",
                        "type": "String"
                    },
                    {
                        "name": "Address",
                        "type": "String"
                    },
                    {
                        "name": "Gender",
                        "type": "String"
                    },
                    {
                        "name": "Salary",
                        "type": "String"
                    },
                    {
                        "name": "EmpId_2",
                        "type": "String"
                    },
                    {
                        "name": "FitrstName_2",
                        "type": "String"
                    },
                    {
                        "name": "LastName_2",
                        "type": "String"
                    },
                    {
                        "name": "Address_2",
                        "type": "String"
                    },
                    {
                        "name": "Gender_2",
                        "type": "String"
                    },
                    {
                        "name": "Salary_2",
                        "type": "String"
                    }
                ]
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/RestResource1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "RestService1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "queryString": {
                        "type": "String"
                    }
                },
                "annotations": [],
                "type": "RestResource",
                "typeProperties": {
                    "relativeUrl": {
                        "value": "@dataset().queryString",
                        "type": "Expression"
                    }
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/RestService1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Json1')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureBlobStorage1",
                    "type": "LinkedServiceReference"
                },
                "annotations": [],
                "type": "Json",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": "InputJson",
                        "container": "inputfiles"
                    }
                },
                "schema": {}
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Filter_data')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "AzureSqlTable1",
                                "type": "DatasetReference"
                            },
                            "name": "tableinput"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "AzureSqlTable1",
                                "type": "DatasetReference"
                            },
                            "name": "sink1",
                            "rejectedDataLinkedService": {
                                "referenceName": "AzureBlobStorage1",
                                "type": "LinkedServiceReference"
                            }
                        }
                    ],
                    "transformations": [
                        {
                            "name": "filter1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EMP_ID as integer,",
                        "          EmpName as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'SELECT * FROM EMP_DATA1',",
                        "     format: 'query') ~> tableinput",
                        "tableinput filter(EMP_ID>50&&not(isNull(EmpName))) ~> filter1",
                        "filter1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EMP_ID as string,",
                        "          EmpName as string",
                        "     ),",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:false,",
                        "     upsertable:false,",
                        "     recreate:true,",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     errorHandlingOption: 'stopOnFirstError') ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/JoinTwoSources')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "Excel1",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Excel1",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "join1"
                        },
                        {
                            "name": "select1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source2",
                        "source1, source2 join(source1@EmpId == source2@EmpId,",
                        "     joinType:'inner',",
                        "     matchType:'exact',",
                        "     ignoreSpaces: false,",
                        "     broadcast: 'auto')~> join1",
                        "join1 select(mapColumn(",
                        "          EmpId = source1@EmpId,",
                        "          FitrstName = source1@FitrstName,",
                        "          LastName = source1@LastName,",
                        "          Address = source1@Address,",
                        "          Gender = source1@Gender,",
                        "          Salary = source1@Salary,",
                        "          EmpId_2 = source1@EmpId,",
                        "          FitrstName_2 = source1@FitrstName,",
                        "          LastName_2 = source1@LastName,",
                        "          Address_2 = source1@Address,",
                        "          Gender_2 = source1@Gender,",
                        "          Salary_2 = source1@Salary",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "select1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['Demo.csv'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Excel1')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/conditional_split')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "Excelfileinput"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        },
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink3"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "split1",
                            "description": "splitting data based on gender and salary"
                        },
                        {
                            "name": "select1"
                        },
                        {
                            "name": "select3"
                        },
                        {
                            "name": "select4"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as integer",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> Excelfileinput",
                        "Excelfileinput split(equals(Gender, 'F') && greaterOrEqual(Salary, 10000),",
                        "     equals(Gender, 'M') && greaterOrEqual(Salary, 10000),",
                        "     disjoint: false) ~> split1@(Femaledatawithsalarygreaterthan10000, maledatawithsalarygreaterthan10000, Defaultdata)",
                        "split1@Femaledatawithsalarygreaterthan10000 select(mapColumn(",
                        "          EmpId,",
                        "          FitrstName,",
                        "          Gender,",
                        "          Salary",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "split1@Defaultdata select(mapColumn(",
                        "          EmpId,",
                        "          FitrstName,",
                        "          LastName,",
                        "          Gender,",
                        "          Salary",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select3",
                        "split1@maledatawithsalarygreaterthan10000 select(mapColumn(",
                        "          EmpId,",
                        "          FitrstName,",
                        "          LastName,",
                        "          Address,",
                        "          Gender,",
                        "          Salary",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select4",
                        "select1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['\\'select1\\''],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1",
                        "select4 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['\\'select2\\''],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink2",
                        "select3 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['\\'select3\\''],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink3"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/derivedcolumn')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "derivedColumn1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source1 derive(Gender = iif(equals(Gender, 'M'),'Male',iif(equals(Gender, 'F'),'female',Gender)),",
                        "          EMP_Name = concat(EmpId,concat(\"-\", FitrstName))) ~> derivedColumn1",
                        "derivedColumn1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['Derivedcolumn'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Exsists')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "Allassociates"
                        },
                        {
                            "linkedService": {
                                "referenceName": "AzureBlobStorage1",
                                "type": "LinkedServiceReference"
                            },
                            "name": "Maleassociates"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "exists1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     Container as string ('outputfiles'),",
                        "     direcctory as string (''),",
                        "     FIlename as string ('select2')",
                        "}",
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> Allassociates",
                        "source(output(",
                        "          EmpId as short,",
                        "          FitrstName as string,",
                        "          Gender as boolean,",
                        "          Salary as short",
                        "     ),",
                        "     useSchema: false,",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false,",
                        "     format: 'delimited',",
                        "     container: 'outputfiles',",
                        "     fileName: '\\'select1\\'',",
                        "     columnDelimiter: ',',",
                        "     escapeChar: '\\\\',",
                        "     quoteChar: '\\\"',",
                        "     columnNamesAsHeader: true) ~> Maleassociates",
                        "Allassociates, Maleassociates exists(toInteger(Allassociates@EmpId) == Maleassociates@EmpId,",
                        "     negate:true,",
                        "     broadcast: 'auto')~> exists1",
                        "exists1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['ExsistsNotExsistsTrans'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Union')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "outputParameterized",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "outputParameterized",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "union1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     FileName as string",
                        "}",
                        "source(output(",
                        "          EmpId as short,",
                        "          FitrstName as string,",
                        "          Gender as boolean,",
                        "          Salary as short",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source(output(",
                        "          EmpId as short,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as boolean,",
                        "          Salary as short",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source2",
                        "source1, source2 union(byName: true)~> union1",
                        "union1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['union'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/outputParameterized')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/sort_transfermation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "sortdata"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source1 sort(desc(Salary, false),",
                        "     asc(EmpId, false)) ~> sortdata",
                        "sortdata sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['Sortdatatransformation'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/lookupTransformation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "FullData"
                        },
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "OnlyMale"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "cast1"
                        },
                        {
                            "name": "cast2"
                        },
                        {
                            "name": "lookup1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     FileName as string",
                        "}",
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> FullData",
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> OnlyMale",
                        "FullData cast(output(",
                        "          EmpId as integer",
                        "     ),",
                        "     errors: true) ~> cast1",
                        "OnlyMale cast(output(",
                        "          EmpId as integer",
                        "     ),",
                        "     errors: true) ~> cast2",
                        "cast1, cast2 lookup(cast1@EmpId == cast2@EmpId,",
                        "     multiple: false,",
                        "     pickup: 'any',",
                        "     broadcast: 'auto')~> lookup1",
                        "lookup1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['LookupTransformation'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/NewBranchTransformation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "Joindata"
                        },
                        {
                            "dataset": {
                                "referenceName": "outputParameterized",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "aggregate1"
                        },
                        {
                            "name": "join1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     FileName as string ('select1')",
                        "}",
                        "source(output(",
                        "          EmpId as integer,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> Joindata",
                        "source(output(",
                        "          EmpId as short,",
                        "          FitrstName as string,",
                        "          Gender as boolean,",
                        "          Salary as short",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source2",
                        "Joindata aggregate(groupBy(Gender),",
                        "     Count_of_emp_By_Gender = count(EmpId)) ~> aggregate1",
                        "Joindata, source2 join(Joindata@EmpId == source2@EmpId,",
                        "     joinType:'inner',",
                        "     matchType:'exact',",
                        "     ignoreSpaces: false,",
                        "     broadcast: 'auto')~> join1",
                        "aggregate1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['AggregatedCountByGender'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1",
                        "join1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['JoinBasedOnNewBrach'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputParameterized')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/selectTransformation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source1 select(mapColumn(",
                        "          EmpId,",
                        "          FitrstName,",
                        "          LastName,",
                        "          Salary,",
                        "          Gender",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "select1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['SelectTransformationData'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/PivotTransformation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "aggregate1"
                        },
                        {
                            "name": "pivot1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source1 derive(SalaryRange = iif(greaterOrEqual(toInteger(Salary),15000), 'High', 'Low')) ~> derivedColumn1",
                        "derivedColumn1 aggregate(groupBy(Gender,",
                        "          SalaryRange),",
                        "     CountEmployee = count(EmpId)) ~> aggregate1",
                        "aggregate1 pivot(groupBy(Gender),",
                        "     pivotBy(SalaryRange),",
                        "     SalaryEmployees = sum(CountEmployee),",
                        "     columnNaming: '$V$N',",
                        "     lateral: false) ~> pivot1",
                        "pivot1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['Pivotdatatset'],",
                        "     truncate: true,",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/unPivottransformation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "outputParameterized",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "unpivot1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     directory as string (' '),",
                        "     FileName as string ('Pivotdatatset')",
                        "}",
                        "source(output(",
                        "          Gender as string,",
                        "          HighSalaryEmployees as short,",
                        "          LowSalaryEmployees as short",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source1 unpivot(output(",
                        "          SalaryRange as integer,",
                        "          cont as short",
                        "     ),",
                        "     ungroupBy(Gender),",
                        "     pivotValues: [\"Low\", \"High\"],",
                        "     lateral: true,",
                        "     ignoreNullPivots: true) ~> unpivot1",
                        "unpivot1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['unpivotdatatransformation'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/outputParameterized')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SurrogateKeyTransformation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "surrogateKey1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source1 keyGenerate(output(EMPID as long),",
                        "     startAt: 1L,",
                        "     stepValue: 1L) ~> surrogateKey1",
                        "surrogateKey1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['DataWithSurrogateColumn'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Window functions transformation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "window1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source1 window(over(Gender),",
                        "     asc(toInteger(EmpId), true),",
                        "     AVG_Salary = avg(toInteger(Salary)),",
                        "          Max_Salary = max(toInteger(Salary)),",
                        "          Min_Salary = min(toInteger(Salary)),",
                        "          Lag_salary = lag(toInteger(Salary)),",
                        "          Lead_Salary = lead(toInteger(Salary)),",
                        "          row_number = rowNumber(),",
                        "          Rank = rank(),",
                        "          DenseRank = denseRank(),",
                        "          sum = sum(toInteger(Salary))) ~> window1",
                        "window1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['Windowfunction_data'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AlterRowTransformation')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "AzureSqlTable1",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        },
                        {
                            "dataset": {
                                "referenceName": "AzureSqlTable1",
                                "type": "DatasetReference"
                            },
                            "name": "source3"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "SqlServerTable1Parameterized",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "alterRow1"
                        },
                        {
                            "name": "join1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     TableName as string",
                        "}",
                        "source(output(",
                        "          EmpId as integer,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as float",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source(output(",
                        "          EMPID as integer,",
                        "          FirstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as decimal(18,0)",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     query: 'select * from EMPLOYEE_DATA',",
                        "     format: 'query') ~> source2",
                        "source(output(",
                        "          EMP_ID as string,",
                        "          EmpName as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     isolationLevel: 'READ_UNCOMMITTED',",
                        "     format: 'table') ~> source3",
                        "join1 alterRow(insertIf(source1@EmpId!=source2@EMPID&&FitrstName!=FirstName&&source1@Gender!=source2@Gender),",
                        "     updateIf(source1@EmpId==source2@EMPID&&FitrstName==FirstName&&source1@Gender==source2@Gender)) ~> alterRow1",
                        "source1, source2 join(source1@EmpId == source2@EMPID,",
                        "     joinType:'left',",
                        "     matchType:'exact',",
                        "     ignoreSpaces: false,",
                        "     broadcast: 'auto')~> join1",
                        "alterRow1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     deletable:false,",
                        "     insertable:true,",
                        "     updateable:true,",
                        "     upsertable:true,",
                        "     keys:['EMPID'],",
                        "     format: 'table',",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     mapColumn(",
                        "          EMPID = source1@EmpId,",
                        "          FirstName = FitrstName,",
                        "          LastName = source1@LastName,",
                        "          Address = source1@Address,",
                        "          Gender = source1@Gender,",
                        "          Salary = source1@Salary",
                        "     )) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
                "[concat(variables('factoryId'), '/datasets/SqlServerTable1Parameterized')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/HandlingErrorRowsInDataFlow')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "split1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false,",
                        "     rowUrlColumn: 'FileName') ~> source1",
                        "source1 split(greaterOrEqual(toInteger(EmpId), 400),",
                        "     disjoint: false) ~> split1@(EMPIDGreaterthan400, Lessthan400)",
                        "split1@EMPIDGreaterthan400 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['Greaterthan400data'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1",
                        "split1@Lessthan400 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['lessthan400Datafile'],",
                        "     mapColumn(",
                        "          EmpId,",
                        "          FitrstName,",
                        "          LastName,",
                        "          Address,",
                        "          Gender,",
                        "          Salary",
                        "     ),",
                        "     partitionBy('hash', 1)) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/DistinctRowsOnEMPID')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        },
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source2"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "union1"
                        },
                        {
                            "name": "aggregate1"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source2",
                        "source1, source2 union(byName: true)~> union1",
                        "union1 aggregate(groupBy(EmpId),",
                        "     each(match(name!='EmpId'), $$ = first($$))) ~> aggregate1",
                        "aggregate1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['DistinctEMPID'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/dataflow1')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "RestResource1",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        }
                    ],
                    "scriptLines": [
                        "parameters{",
                        "     parameter1 as string ('?page=1')",
                        "}",
                        "source(output(",
                        "          body as (data as (avatar as string, email as string, first_name as string, id as string, last_name as string), support as (text as string, url as string)),",
                        "          headers as [string,string]",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     limit: 100,",
                        "     httpMethod: 'GET',",
                        "     timeout: 30,",
                        "     requestInterval: 0,",
                        "     headers: ['x-api-key' -> 'reqres-free-v1'],",
                        "     paginationRules: ['supportRFC5988' -> 'true'],",
                        "     responseFormat: ['type' -> 'json', 'documentForm' -> 'arrayOfDocuments']) ~> source1",
                        "source1 select(mapColumn(",
                        "          id = body.data.id,",
                        "          email = body.data.email",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "select1 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['API_outputfile'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/RestResource1')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/JSON_inputdata')]",
            "type": "Microsoft.DataFactory/factories/dataflows",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "MappingDataFlow",
                "typeProperties": {
                    "sources": [
                        {
                            "dataset": {
                                "referenceName": "demoexceldata",
                                "type": "DatasetReference"
                            },
                            "name": "source1"
                        }
                    ],
                    "sinks": [
                        {
                            "dataset": {
                                "referenceName": "outputfileCSV",
                                "type": "DatasetReference"
                            },
                            "name": "sink1"
                        },
                        {
                            "dataset": {
                                "referenceName": "Json1",
                                "type": "DatasetReference"
                            },
                            "name": "sink2"
                        }
                    ],
                    "transformations": [
                        {
                            "name": "select1"
                        },
                        {
                            "name": "derivedColumn1"
                        },
                        {
                            "name": "derivedColumn3"
                        }
                    ],
                    "scriptLines": [
                        "source(output(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string",
                        "     ),",
                        "     allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     ignoreNoFilesFound: false) ~> source1",
                        "source1 select(mapColumn(",
                        "          EmpId,",
                        "          FitrstName",
                        "     ),",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true) ~> select1",
                        "select1 derive(start = '{',",
                        "          EmpId = '\"name\"'+':'+'\"'+EmpId+'\"',",
                        "          FitrstName = '\"Job\"'+':'+'\"'+FitrstName+'\"',",
                        "          End = '}',",
                        "          EmpId_1 = EmpId,",
                        "          FitrstName_1 = FitrstName) ~> derivedColumn1",
                        "derivedColumn1 derive(OutputJSON = start+EmpId+','+FitrstName+End,",
                        "          URL = \"https://reqres.in/api/users\") ~> derivedColumn3",
                        "derivedColumn3 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     input(",
                        "          EmpId as string,",
                        "          FitrstName as string,",
                        "          LastName as string,",
                        "          Address as string,",
                        "          Gender as string,",
                        "          Salary as string,",
                        "          EmpId_2 as string,",
                        "          FitrstName_2 as string,",
                        "          LastName_2 as string,",
                        "          Address_2 as string,",
                        "          Gender_2 as string,",
                        "          Salary_2 as string",
                        "     ),",
                        "     partitionFileNames:['API outputfile'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     partitionBy('hash', 1)) ~> sink1",
                        "derivedColumn3 sink(allowSchemaDrift: true,",
                        "     validateSchema: false,",
                        "     partitionFileNames:['InputJson'],",
                        "     skipDuplicateMapInputs: true,",
                        "     skipDuplicateMapOutputs: true,",
                        "     mapColumn(",
                        "          EmpId = EmpId_1,",
                        "          FitrstName = FitrstName_1",
                        "     ),",
                        "     partitionBy('hash', 1)) ~> sink2"
                    ]
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/demoexceldata')]",
                "[concat(variables('factoryId'), '/datasets/outputfileCSV')]",
                "[concat(variables('factoryId'), '/datasets/Json1')]"
            ]
        }
    ]
}